{"version":3,"sources":["components/Search.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Search","hideButtons","useState","input","setInput","search","e","preventDefault","className","value","onChange","target","Button","type","onClick","variant","Home","to","Avatar","src","alt","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8WAqCeA,MA9Bf,YAAwC,IAAD,IAAtBC,mBAAsB,WACTC,mBAAS,IADA,mBAC5BC,EAD4B,KACrBC,EADqB,KAG7BC,EAAS,SAACC,GACZA,EAAEC,kBAEN,OACI,0BAAMC,UAAU,UACZ,yBAAKA,UAAU,iBACX,kBAAC,IAAD,CAAYA,UAAU,sBACtB,2BAAOC,MAAON,EAAOO,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOF,UACtD,kBAAC,IAAD,OAGFR,EAME,yBAAKO,UAAU,mBACX,kBAACI,EAAA,EAAD,CAAQJ,UAAU,wBAAwBK,KAAK,SAASC,QAAST,EAAQU,QAAQ,YAAjF,iBACA,kBAACH,EAAA,EAAD,CAAQJ,UAAU,wBAAwBO,QAAQ,YAAlD,sBAPJ,yBAAKP,UAAU,mBACX,kBAACI,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAST,EAAQU,QAAQ,YAA/C,iBACA,kBAACH,EAAA,EAAD,CAAQG,QAAQ,YAAhB,wBCWLC,MA5Bf,WACI,OACI,yBAAKR,UAAU,QACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,CAAMS,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEJ,yBAAKT,UAAU,qBACX,kBAAC,IAAD,CAAMS,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,QAGR,yBAAKV,UAAU,cACX,yBAAKW,IAAI,qFACTC,IAAI,KACJ,yBAAKZ,UAAU,wBACX,kBAAC,EAAD,U,OCPLa,MAdf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,KACV,kBAAC,EAAD,WCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2ed1fba.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './Search.css'\nimport SearchIcon from '@material-ui/icons/Search'\nimport MicIcon from '@material-ui/icons/Mic'\nimport {Button} from '@material-ui/core'\n\n\nfunction Search({hideButtons = false}) {\n    const [input, setInput] = useState('');\n\n    const search = (e) =>{\n        e.preventDefault();\n    };\n    return (\n        <form className='search'>\n            <div className='search__input'>\n                <SearchIcon className='search__inputIcon'/>\n                <input value={input} onChange={e => setInput(e.target.value)}/>\n                <MicIcon />\n\n            </div>\n            {!hideButtons ? (\n                <div className='search__buttons'>\n                    <Button type='submit' onClick={search} variant='outlined'>Google Search</Button>\n                    <Button variant='outlined'>I'm Feeling Lucky</Button>\n                </div>\n            ):(\n                <div className='search__buttons'>\n                    <Button className='search__buttonsHidden' type='submit' onClick={search} variant='outlined'>Google Search</Button>\n                    <Button className='search__buttonsHidden' variant='outlined'>I'm Feeling Lucky</Button>\n                </div>\n            )}\n            \n        </form>\n    )\n}\n\nexport default Search\n","import React from 'react';\nimport './Home.css'\nimport {Link} from 'react-router-dom'\nimport AppsIcon from '@material-ui/icons/Apps'\nimport {Avatar} from '@material-ui/core'\nimport Search from '../components/Search'\n\nfunction Home() {\n    return (\n        <div className=\"home\">\n            <div className=\"home__header\">\n                <div className=\"home__headerLeft\">\n                    <Link to='/about'>About</Link>\n                    <Link to='/store'>Store</Link>\n                </div>\n                <div className=\"home__headerRight\">\n                    <Link to='/gmail'>Gmail</Link>\n                    <Link to='/images'>Images</Link>\n                    <AppsIcon />\n                    <Avatar />\n                </div>\n            </div>\n            <div className=\"home__body\">\n                <img src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\" \n                alt=''/>\n                <div className=\"home__inputContainer\">\n                    <Search />\n\n                </div>\n                \n            </div>\n        </div>\n    )\n    \n}\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from \"./pages/Home\"\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}